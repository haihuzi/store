<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zh.store.mapper.UserMapper">

    <!--
    id属性:标签给这个映射负责分配一个唯一的id值，对应的就是resultMap="id属性的值"属性的取值
    type属性:取值是一个类，表示的是数据库中的查询结果与Javα中哪个实体类进行结果集的映射
    -->
    <resultMap id="UserEntityMap" type="com.zh.store.entity.User">
        <!-- 将表的资源和类的属性不一致的字段进行匹配指定，名称一致的字段可以省略不写,主键不可以省略 -->
        <!--
        result 配合完成名称不一致的映射:
        column属性:表示表中的资源名称
        property属性:表示类中的属性名称
        -->
        <id column="uid" property="uid"/>
        <result column="is_delete" property="isDelete"/>
        <result column="created_user" property="createdUser"/>
        <result column="created_time" property="createdTime"/>
        <result column="modified_user" property="modifiedUser"/>
        <result column="modified_time" property="modifiedTime"/>
    </resultMap>

    <!--新增用户 useGeneratedKeys:开启主键自增-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">
        INSERT INTO
            t_user (username, password, salt, phone, email, gender, avatar,
                    is_delete, created_user, created_time, modified_user, modified_time)
        VALUES
            (#{username}, #{password}, #{salt}, #{phone}, #{email}, #{gender},
             #{avatar}, #{isDelete}, #{createdUser}, #{createdTime},
             #{modifiedUser},#{modifiedTime})
    </insert>

    <!--
    resultType:表示查询的结果集类型，只需要指定对应映射类的类型，并且包含完整包接口;
    resultMap:标签当表的资源和类的对象属性的字段名称不一致时，来自定义查询结果集的映射规则
    -->
    <!-- 根据用户名查询用户-->
    <select id="findByUsername" resultMap="UserEntityMap">
        SELECT * FROM t_user WHERE username=#{username}
    </select>

    <update id="updatePasswordByUid">
        UPDATE t_user SET salt=#{salt},
                          password=#{password},
                          modified_user = #{modifiedUser},
                          modified_time = #{modifiedTime} WHERE uid=#{uid}
    </update>

    <select id="findByUid" resultMap="UserEntityMap">
        SELECT * FROM t_user WHERE uid=#{uid}
    </select>

    <update id="updateUserByUid">
        UPDATE t_user SET
        <if test="username != null">username = #{username},</if>
        <if test="avatar != null">avatar = #{email},</if>
        <if test="phone != null">phone = #{phone},</if>
        <if test="email != null">email = #{email},</if>
        <if test="gender != null">gender = #{gender},</if>
        modified_user = #{modifiedUser},
        modified_time = #{modifiedTime}
        WHERE
        uid = #{uid}
    </update>

    <update id="updateAvatarByUid">
        UPDATE
            t_user
        SET
            avatar = #{avatar},
            modified_user = #{modifiedUser},
            modified_time = #{modifiedTime}
        WHERE
            uid = #{uid}
    </update>
</mapper>